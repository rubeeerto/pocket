#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è Pocket Option Analyzer Bot
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
"""

import asyncio
import pandas as pd
import numpy as np
from main import TechnicalAnalyzer, INDICATOR_CONFIG, SIGNAL_THRESHOLDS

def test_technical_analyzer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range('2024-01-01', periods=200, freq='1H')
    np.random.seed(42)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
    base_price = 100.0
    prices = []
    
    for i in range(200):
        if i == 0:
            price = base_price
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            trend = 0.001 * (i - 100)  # –¢—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö –¥–æ —Å–µ—Ä–µ–¥–∏–Ω—ã, –ø–æ—Ç–æ–º –≤–Ω–∏–∑
            volatility = np.random.normal(0, 0.02)
            price = prices[-1] * (1 + trend + volatility)
        
        prices.append(price)
    
    # –°–æ–∑–¥–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
    data = []
    for i, price in enumerate(prices):
        high = price * (1 + abs(np.random.normal(0, 0.01)))
        low = price * (1 - abs(np.random.normal(0, 0.01)))
        open_price = prices[i-1] if i > 0 else price
        close_price = price
        volume = np.random.randint(1000, 10000)
        
        data.append([dates[i], open_price, high, low, close_price, volume])
    
    df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df.set_index('timestamp', inplace=True)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(df)} —Å–≤–µ—á–µ–π")
    print(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {df['close'].min():.2f} - {df['close'].max():.2f}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = TechnicalAnalyzer()
    
    try:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        print("\nüîß –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        indicators = analyzer.calculate_indicators(df)
        
        print("‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã:")
        for name, values in indicators.items():
            if not values.empty:
                print(f"   ‚Ä¢ {name}: {values.iloc[-1]:.4f}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        print("\nüìä –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        result = analyzer.analyze_signals(df, indicators)
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"   ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑: {result['signal']}")
        print(f"   ‚Ä¢ –°–∏–ª–∞: {result['strength']}")
        print(f"   ‚Ä¢ –ë–∞–ª–ª: {result['score']}")
        print(f"   ‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {result['current_price']:.4f}")
        print(f"   ‚Ä¢ RSI: {result['current_rsi']:.1f}")
        print(f"   ‚Ä¢ MACD –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {result['current_macd_hist']:.6f}")
        print(f"   ‚Ä¢ Stochastic RSI: {result['current_stoch_rsi']:.1f}")
        
        print("\nüìã –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:")
        for signal in result['signals']:
            print(f"   ‚Ä¢ {signal}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_symbol_formatting():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤"""
    print("\nüî§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤...")
    
    analyzer = TechnicalAnalyzer()
    
    test_symbols = [
        "EUR/USD",
        "GBP/USD", 
        "BTC/USDT",
        "ETH/USDT",
        "USD/JPY"
    ]
    
    for symbol in test_symbols:
        formatted = analyzer._format_symbol(symbol)
        print(f"   ‚Ä¢ {symbol} ‚Üí {formatted}")
    
    print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    print("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    for key, value in INDICATOR_CONFIG.items():
        print(f"   ‚Ä¢ {key}: {value}")
    
    print("\nüéØ –ü–æ—Ä–æ–≥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:")
    for key, value in SIGNAL_THRESHOLDS.items():
        print(f"   ‚Ä¢ {key}: {value}")
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_data_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
    min_candles = 100
    print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {min_candles}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    supported_timeframes = ['1m', '5m', '15m', '30m', '1h', '4h', '1d']
    print(f"   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(supported_timeframes)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–∏–º–≤–æ–ª–æ–≤
    supported_symbols = ['EUR/USD', 'GBP/USD', 'BTC/USDT', 'ETH/USDT']
    print(f"   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(supported_symbols)}")
    
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Pocket Option Analyzer Bot")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        test_configuration()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
        test_symbol_formatting()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
        test_data_validation()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        success = test_technical_analyzer()
        
        print("\n" + "=" * 60)
        if success:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")

if __name__ == "__main__":
    main()
